-- File auto generated by purescript-bridge! --
module Supple.Data.Api where

import Data.Generic.Rep (class Generic)
import Data.Lens (Iso', Lens', Prism', lens, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe(..))
import Data.Newtype (class Newtype)
import Data.Symbol (SProxy(SProxy))
import Prim (Array, Number, String)

import Prelude

newtype Bucket =
    Bucket {
      _bBucketId :: Number
    , _bSvid :: Number
    , _bPrice :: Number
    }

derive instance eqBucket :: Eq Bucket
derive instance genericBucket :: Generic Bucket _
derive instance newtypeBucket :: Newtype Bucket _

--------------------------------------------------------------------------------
_Bucket :: Iso' Bucket { _bBucketId :: Number, _bSvid :: Number, _bPrice :: Number}
_Bucket = _Newtype

bBucketId :: Lens' Bucket Number
bBucketId = _Newtype <<< prop (SProxy :: SProxy "_bBucketId")

bSvid :: Lens' Bucket Number
bSvid = _Newtype <<< prop (SProxy :: SProxy "_bSvid")

bPrice :: Lens' Bucket Number
bPrice = _Newtype <<< prop (SProxy :: SProxy "_bPrice")

--------------------------------------------------------------------------------
newtype Experiment =
    Experiment {
      _eExpId :: Number
    , _eSku :: String
    , _eName :: String
    }

derive instance eqExperiment :: Eq Experiment
derive instance genericExperiment :: Generic Experiment _
derive instance newtypeExperiment :: Newtype Experiment _

--------------------------------------------------------------------------------
_Experiment :: Iso' Experiment { _eExpId :: Number, _eSku :: String, _eName :: String}
_Experiment = _Newtype

eExpId :: Lens' Experiment Number
eExpId = _Newtype <<< prop (SProxy :: SProxy "_eExpId")

eSku :: Lens' Experiment String
eSku = _Newtype <<< prop (SProxy :: SProxy "_eSku")

eName :: Lens' Experiment String
eName = _Newtype <<< prop (SProxy :: SProxy "_eName")

--------------------------------------------------------------------------------
newtype ExperimentBuckets =
    ExperimentBuckets {
      _ebExpId :: Number
    , _ebSku :: String
    , _ebName :: String
    , _ebBuckets :: Array Bucket
    }

derive instance eqExperimentBuckets :: Eq ExperimentBuckets
derive instance genericExperimentBuckets :: Generic ExperimentBuckets _
derive instance newtypeExperimentBuckets :: Newtype ExperimentBuckets _

--------------------------------------------------------------------------------
_ExperimentBuckets :: Iso' ExperimentBuckets { _ebExpId :: Number, _ebSku :: String, _ebName :: String, _ebBuckets :: Array Bucket}
_ExperimentBuckets = _Newtype

ebExpId :: Lens' ExperimentBuckets Number
ebExpId = _Newtype <<< prop (SProxy :: SProxy "_ebExpId")

ebSku :: Lens' ExperimentBuckets String
ebSku = _Newtype <<< prop (SProxy :: SProxy "_ebSku")

ebName :: Lens' ExperimentBuckets String
ebName = _Newtype <<< prop (SProxy :: SProxy "_ebName")

ebBuckets :: Lens' ExperimentBuckets (Array Bucket)
ebBuckets = _Newtype <<< prop (SProxy :: SProxy "_ebBuckets")

--------------------------------------------------------------------------------
newtype Product =
    Product {
      _pId :: Number
    , _pTitle :: String
    , _pVariants :: Array Variant
    , _pImage :: String
    }

derive instance eqProduct :: Eq Product
derive instance genericProduct :: Generic Product _
derive instance newtypeProduct :: Newtype Product _

--------------------------------------------------------------------------------
_Product :: Iso' Product { _pId :: Number, _pTitle :: String, _pVariants :: Array Variant, _pImage :: String}
_Product = _Newtype

pId :: Lens' Product Number
pId = _Newtype <<< prop (SProxy :: SProxy "_pId")

pTitle :: Lens' Product String
pTitle = _Newtype <<< prop (SProxy :: SProxy "_pTitle")

pVariants :: Lens' Product (Array Variant)
pVariants = _Newtype <<< prop (SProxy :: SProxy "_pVariants")

pImage :: Lens' Product String
pImage = _Newtype <<< prop (SProxy :: SProxy "_pImage")

--------------------------------------------------------------------------------
newtype Variant =
    Variant {
      _vId :: Number
    , _vProductId :: Number
    , _vTitle :: String
    , _vSku :: String
    }

derive instance eqVariant :: Eq Variant
derive instance genericVariant :: Generic Variant _
derive instance newtypeVariant :: Newtype Variant _

--------------------------------------------------------------------------------
_Variant :: Iso' Variant { _vId :: Number, _vProductId :: Number, _vTitle :: String, _vSku :: String}
_Variant = _Newtype

vId :: Lens' Variant Number
vId = _Newtype <<< prop (SProxy :: SProxy "_vId")

vProductId :: Lens' Variant Number
vProductId = _Newtype <<< prop (SProxy :: SProxy "_vProductId")

vTitle :: Lens' Variant String
vTitle = _Newtype <<< prop (SProxy :: SProxy "_vTitle")

vSku :: Lens' Variant String
vSku = _Newtype <<< prop (SProxy :: SProxy "_vSku")

--------------------------------------------------------------------------------
newtype CreateExperiment =
    CreateExperiment {
      _ceProductId :: Number
    , _cePrice :: Number
    , _ceName :: String
    }

derive instance eqCreateExperiment :: Eq CreateExperiment
derive instance genericCreateExperiment :: Generic CreateExperiment _
derive instance newtypeCreateExperiment :: Newtype CreateExperiment _

--------------------------------------------------------------------------------
_CreateExperiment :: Iso' CreateExperiment { _ceProductId :: Number, _cePrice :: Number, _ceName :: String}
_CreateExperiment = _Newtype

ceProductId :: Lens' CreateExperiment Number
ceProductId = _Newtype <<< prop (SProxy :: SProxy "_ceProductId")

cePrice :: Lens' CreateExperiment Number
cePrice = _Newtype <<< prop (SProxy :: SProxy "_cePrice")

ceName :: Lens' CreateExperiment String
ceName = _Newtype <<< prop (SProxy :: SProxy "_ceName")

--------------------------------------------------------------------------------
newtype OkResponse =
    OkResponse {
      message :: String
    }

derive instance eqOkResponse :: Eq OkResponse
derive instance genericOkResponse :: Generic OkResponse _
derive instance newtypeOkResponse :: Newtype OkResponse _

--------------------------------------------------------------------------------
_OkResponse :: Iso' OkResponse { message :: String}
_OkResponse = _Newtype

--------------------------------------------------------------------------------
