-- File auto generated by purescript-bridge! --
module SweetSpot.Data.Api where

import Data.Argonaut.Decode (class DecodeJson)
import Data.Argonaut.Decode.Generic.Rep (genericDecodeJson)
import Data.Argonaut.Encode (class EncodeJson)
import Data.Argonaut.Encode.Generic.Rep (genericEncodeJson)
import Data.Generic.Rep (class Generic)
import Data.Lens (Iso', Lens', Prism', lens, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe, Maybe(..))
import Data.Newtype (class Newtype)
import Data.Symbol (SProxy(SProxy))
import Prim (Array, Int, Number, String)

import Prelude

newtype UICampaign =
    UICampaign {
      _uiCampaignId :: String
    , _uiCampaignStart :: Maybe String
    , _uiCampaignEnd :: Maybe String
    , _uiCampaignTreatments :: Array UITreatment
    }

derive instance eqUICampaign :: Eq UICampaign
derive instance genericUICampaign :: Generic UICampaign _
derive instance newtypeUICampaign :: Newtype UICampaign _
instance encodeJsonUICampaign :: EncodeJson UICampaign where
  encodeJson = genericEncodeJson
instance decodeJsonUICampaign :: DecodeJson UICampaign where
  decodeJson = genericDecodeJson

--------------------------------------------------------------------------------
_UICampaign :: Iso' UICampaign { _uiCampaignId :: String, _uiCampaignStart :: Maybe String, _uiCampaignEnd :: Maybe String, _uiCampaignTreatments :: Array UITreatment}
_UICampaign = _Newtype

uiCampaignId :: Lens' UICampaign String
uiCampaignId = _Newtype <<< prop (SProxy :: SProxy "_uiCampaignId")

uiCampaignStart :: Lens' UICampaign (Maybe String)
uiCampaignStart = _Newtype <<< prop (SProxy :: SProxy "_uiCampaignStart")

uiCampaignEnd :: Lens' UICampaign (Maybe String)
uiCampaignEnd = _Newtype <<< prop (SProxy :: SProxy "_uiCampaignEnd")

uiCampaignTreatments :: Lens' UICampaign (Array UITreatment)
uiCampaignTreatments = _Newtype <<< prop (SProxy :: SProxy "_uiCampaignTreatments")

--------------------------------------------------------------------------------
newtype UITreatment =
    UITreatment {
      _uiTreatmentSvid :: String
    , _uiTreatmentTitle :: String
    , _uiTreatmentSku :: String
    , _uiTreatmentProductId :: String
    , _uiTreatmentPrice :: Number
    , _uiTreatmentCurrency :: String
    , _uiTreatment :: Int
    }

derive instance eqUITreatment :: Eq UITreatment
derive instance genericUITreatment :: Generic UITreatment _
derive instance newtypeUITreatment :: Newtype UITreatment _
instance encodeJsonUITreatment :: EncodeJson UITreatment where
  encodeJson = genericEncodeJson
instance decodeJsonUITreatment :: DecodeJson UITreatment where
  decodeJson = genericDecodeJson

--------------------------------------------------------------------------------
_UITreatment :: Iso' UITreatment { _uiTreatmentSvid :: String, _uiTreatmentTitle :: String, _uiTreatmentSku :: String, _uiTreatmentProductId :: String, _uiTreatmentPrice :: Number, _uiTreatmentCurrency :: String, _uiTreatment :: Int}
_UITreatment = _Newtype

uiTreatmentSvid :: Lens' UITreatment String
uiTreatmentSvid = _Newtype <<< prop (SProxy :: SProxy "_uiTreatmentSvid")

uiTreatmentTitle :: Lens' UITreatment String
uiTreatmentTitle = _Newtype <<< prop (SProxy :: SProxy "_uiTreatmentTitle")

uiTreatmentSku :: Lens' UITreatment String
uiTreatmentSku = _Newtype <<< prop (SProxy :: SProxy "_uiTreatmentSku")

uiTreatmentProductId :: Lens' UITreatment String
uiTreatmentProductId = _Newtype <<< prop (SProxy :: SProxy "_uiTreatmentProductId")

uiTreatmentPrice :: Lens' UITreatment Number
uiTreatmentPrice = _Newtype <<< prop (SProxy :: SProxy "_uiTreatmentPrice")

uiTreatmentCurrency :: Lens' UITreatment String
uiTreatmentCurrency = _Newtype <<< prop (SProxy :: SProxy "_uiTreatmentCurrency")

uiTreatment :: Lens' UITreatment Int
uiTreatment = _Newtype <<< prop (SProxy :: SProxy "_uiTreatment")

--------------------------------------------------------------------------------
newtype Image =
    Image {
      _imageSrc :: String
    }

derive instance eqImage :: Eq Image
derive instance genericImage :: Generic Image _
derive instance newtypeImage :: Newtype Image _
instance encodeJsonImage :: EncodeJson Image where
  encodeJson = genericEncodeJson
instance decodeJsonImage :: DecodeJson Image where
  decodeJson = genericDecodeJson

--------------------------------------------------------------------------------
_Image :: Iso' Image { _imageSrc :: String}
_Image = _Newtype

imageSrc :: Lens' Image String
imageSrc = _Newtype <<< prop (SProxy :: SProxy "_imageSrc")

--------------------------------------------------------------------------------
newtype Variant =
    Variant {
      _variantId :: String
    , _variantProductId :: String
    , _variantTitle :: String
    , _variantSku :: String
    , _variantPrice :: Number
    }

derive instance eqVariant :: Eq Variant
derive instance genericVariant :: Generic Variant _
derive instance newtypeVariant :: Newtype Variant _
instance encodeJsonVariant :: EncodeJson Variant where
  encodeJson = genericEncodeJson
instance decodeJsonVariant :: DecodeJson Variant where
  decodeJson = genericDecodeJson

--------------------------------------------------------------------------------
_Variant :: Iso' Variant { _variantId :: String, _variantProductId :: String, _variantTitle :: String, _variantSku :: String, _variantPrice :: Number}
_Variant = _Newtype

variantId :: Lens' Variant String
variantId = _Newtype <<< prop (SProxy :: SProxy "_variantId")

variantProductId :: Lens' Variant String
variantProductId = _Newtype <<< prop (SProxy :: SProxy "_variantProductId")

variantTitle :: Lens' Variant String
variantTitle = _Newtype <<< prop (SProxy :: SProxy "_variantTitle")

variantSku :: Lens' Variant String
variantSku = _Newtype <<< prop (SProxy :: SProxy "_variantSku")

variantPrice :: Lens' Variant Number
variantPrice = _Newtype <<< prop (SProxy :: SProxy "_variantPrice")

--------------------------------------------------------------------------------
newtype Product =
    Product {
      _productId :: String
    , _productTitle :: String
    , _productVariants :: Array Variant
    , _productImage :: Image
    }

derive instance eqProduct :: Eq Product
derive instance genericProduct :: Generic Product _
derive instance newtypeProduct :: Newtype Product _
instance encodeJsonProduct :: EncodeJson Product where
  encodeJson = genericEncodeJson
instance decodeJsonProduct :: DecodeJson Product where
  decodeJson = genericDecodeJson

--------------------------------------------------------------------------------
_Product :: Iso' Product { _productId :: String, _productTitle :: String, _productVariants :: Array Variant, _productImage :: Image}
_Product = _Newtype

productId :: Lens' Product String
productId = _Newtype <<< prop (SProxy :: SProxy "_productId")

productTitle :: Lens' Product String
productTitle = _Newtype <<< prop (SProxy :: SProxy "_productTitle")

productVariants :: Lens' Product (Array Variant)
productVariants = _Newtype <<< prop (SProxy :: SProxy "_productVariants")

productImage :: Lens' Product Image
productImage = _Newtype <<< prop (SProxy :: SProxy "_productImage")

--------------------------------------------------------------------------------
